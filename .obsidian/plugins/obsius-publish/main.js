/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ObsiusPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/http.ts
function http_default(method, url, data = null) {
  return __async(this, null, function* () {
    var _a;
    const headers = new Headers({
      Accept: "application/json"
    });
    if (data) {
      headers.set("Content-Type", "application/json");
    }
    const resp = yield fetch(url, __spreadValues({
      method,
      headers
    }, data ? { body: JSON.stringify(data) } : {}));
    if (!resp.ok) {
      throw new Error(`Request failed: ${resp.status} - ${yield resp.text()}`);
    }
    return parseInt((_a = resp.headers.get("Content-Length")) != null ? _a : "0") != 0 ? yield resp.json() : null;
  });
}

// src/obsius.ts
var baseUrl = "https://obsius.site";
var obsiusWrapper = {
  createPost(title, content) {
    return __async(this, null, function* () {
      return http_default("POST", `${baseUrl}/`, { title, content });
    });
  },
  updatePost(id, secret, title, content) {
    return __async(this, null, function* () {
      return http_default("PUT", `${baseUrl}/${id}`, {
        secret,
        title,
        content
      });
    });
  },
  deletePost(id, secret) {
    return __async(this, null, function* () {
      return http_default("DELETE", `${baseUrl}/${id}`, { secret });
    });
  }
};
function createClient(loadData, saveData) {
  return __async(this, null, function* () {
    const data = yield loadData();
    return {
      data() {
        return data;
      },
      publishPost(file) {
        return __async(this, null, function* () {
          if (data.posts[file.path]) {
            yield this.updatePost(file);
            return null;
          } else {
            return yield this.createPost(file);
          }
        });
      },
      createPost(file) {
        return __async(this, null, function* () {
          const title = file.basename;
          const content = yield file.vault.read(file);
          try {
            const resp = yield obsiusWrapper.createPost(title, content);
            data.posts[file.path] = {
              id: resp.id,
              secret: resp.secret
            };
            yield saveData(data);
            return `${baseUrl}/${resp.id}`;
          } catch (e) {
            console.error(e);
            throw new Error("Failed to create post");
          }
        });
      },
      getUrl(file) {
        const post = data.posts[file.path];
        if (!post) {
          return null;
        }
        return `${baseUrl}/${post.id}`;
      },
      updatePost(file) {
        return __async(this, null, function* () {
          const post = data.posts[file.path];
          const title = file.basename;
          const content = yield file.vault.read(file);
          try {
            yield obsiusWrapper.updatePost(post.id, post.secret, title, content);
          } catch (e) {
            console.error(e);
            throw new Error("Failed to update post");
          }
        });
      },
      deletePost(file) {
        return __async(this, null, function* () {
          const post = data.posts[file.path];
          try {
            yield obsiusWrapper.deletePost(post.id, post.secret);
            delete data.posts[file.path];
            yield saveData(data);
          } catch (e) {
            console.error(e);
            throw new Error("Failed to delete post");
          }
        });
      }
    };
  });
}

// src/text.ts
function flatten(obj) {
  const result = {};
  for (const key of Object.keys(obj)) {
    const value = obj[key];
    if (typeof value === "string") {
      result[key] = value;
    } else {
      const inner = flatten(value);
      for (const innerKey of Object.keys(inner)) {
        result[`${key}.${innerKey}`] = inner[innerKey];
      }
    }
  }
  return result;
}
var strings = flatten({
  serviceName: "Obsius",
  actions: {
    create: {
      name: "Publish to Obsius",
      success: "Note published to Obsius. URL copied to clipboard.",
      failure: "Failed to publish note to Obsius"
    },
    update: {
      name: "Update in Obsius",
      success: "Updated note in Obsius. It may take a little while before update becomes visible.",
      failure: "Failed to update note in Obsius"
    },
    copyUrl: {
      name: "Copy Obsius URL",
      success: "Obsius URL copied to clipboard",
      failure: "Note not yet published"
    },
    remove: {
      name: "Remove from Obsius",
      success: "Note removed from Obsius",
      failure: "Failed to remove note form Obsius"
    },
    listPosts: {
      name: "View published posts",
      title: "Published posts",
      showFile: "View file",
      showPost: "View post"
    }
  },
  modals: {
    showUrl: {
      title: "Note published at:",
      copy: "Copy URL"
    }
  }
});
function getText(path, ...args) {
  const value = strings[path];
  if (value !== void 0) {
    if (args.length) {
      return `${value}: ${args.join(", ")}`;
    }
    return value;
  }
  return path;
}

// src/modals.ts
var import_obsidian = __toModule(require("obsidian"));
var PublishedPostsModal = class extends import_obsidian.Modal {
  constructor(app2, obsiusClient) {
    super(app2);
    this.obsiusClient = obsiusClient;
  }
  onOpen() {
    this.contentEl.createEl("h1", { text: getText("actions.listPosts.title") });
    for (const [path] of Object.entries(this.obsiusClient.data().posts)) {
      const file = app.vault.getAbstractFileByPath(path);
      if (!(file instanceof import_obsidian.TFile)) {
        continue;
      }
      const container = this.contentEl.createEl("div", {
        cls: ["published-posts-modal", "list-item-container"]
      });
      container.createEl("span", { text: path });
      const buttonContainer = container.createEl("div");
      const showFile = buttonContainer.createEl("button", {
        title: getText("actions.listPosts.showFile")
      });
      showFile.addEventListener("click", () => app.workspace.openLinkText(path, path).then(() => this.close()));
      (0, import_obsidian.setIcon)(showFile, "file-text");
      const webLink = buttonContainer.createEl("a", {
        cls: "hidden",
        href: this.obsiusClient.getUrl(file)
      });
      const showPost = buttonContainer.createEl("button");
      showPost.addEventListener("click", () => {
        webLink.click();
        this.close();
      });
      (0, import_obsidian.setIcon)(showPost, "globe");
    }
  }
  onClose() {
    this.contentEl.empty();
  }
};

// main.ts
var ObsiusPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.obsiusClient = yield createClient(() => __async(this, null, function* () {
        return __spreadValues({
          posts: {}
        }, yield this.loadData());
      }), (data) => __async(this, null, function* () {
        return yield this.saveData(data);
      }));
      this.addObsiusCommands();
      this.registerFileMenuEvent();
    });
  }
  onunload() {
  }
  addObsiusCommands() {
    this.addCommand({
      id: "obsius.action.listPosts",
      name: getText("actions.listPosts.name"),
      callback: () => this.showPublishedPosts()
    });
    this.addCommand({
      id: "obsius.action.create",
      name: getText("actions.create.name"),
      editorCheckCallback: (checking, _, view) => {
        if (checking) {
          return !this.obsiusClient.getUrl(view.file);
        }
        this.publishFile(view.file);
      }
    });
    this.addCommand({
      id: "obsius.action.update",
      name: getText("actions.update.name"),
      editorCheckCallback: (checking, _, view) => {
        if (checking) {
          return !!this.obsiusClient.getUrl(view.file);
        }
        this.updateFile(view.file);
      }
    });
    this.addCommand({
      id: "obsius.action.copyUrl",
      name: getText("actions.copyUrl.name"),
      editorCheckCallback: (checking, _, view) => {
        if (checking) {
          return !!this.obsiusClient.getUrl(view.file);
        }
        this.copyUrl(view.file);
      }
    });
    this.addCommand({
      id: "obsius.action.remove",
      name: getText("actions.remove.name"),
      editorCheckCallback: (checking, _, view) => {
        if (checking) {
          return !!this.obsiusClient.getUrl(view.file);
        }
        this.deleteFile(view.file);
      }
    });
  }
  registerFileMenuEvent() {
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (file instanceof import_obsidian2.TFile) {
        menu.addSeparator();
        if (!this.obsiusClient.getUrl(file)) {
          menu.addItem((item) => item.setTitle(getText("actions.create.name")).setIcon("up-chevron-glyph").onClick(() => this.publishFile(file)));
        } else {
          menu.addItem((item) => item.setTitle(getText("actions.update.name")).setIcon("double-up-arrow-glyph").onClick(() => this.updateFile(file))).addItem((item) => item.setTitle(getText("actions.copyUrl.name")).setIcon("link").onClick(() => this.copyUrl(file))).addItem((item) => item.setTitle(getText("actions.remove.name")).setIcon("cross").onClick(() => this.deleteFile(file)));
        }
        menu.addSeparator();
      }
    }));
  }
  showPublishedPosts() {
    new PublishedPostsModal(this.app, this.obsiusClient).open();
  }
  publishFile(file) {
    return __async(this, null, function* () {
      try {
        const url = yield this.obsiusClient.createPost(file);
        yield navigator.clipboard.writeText(url);
        new import_obsidian2.Notice(getText("actions.create.success"));
      } catch (e) {
        console.error(e);
        new import_obsidian2.Notice(getText("actions.create.failure"));
      }
    });
  }
  updateFile(file) {
    return __async(this, null, function* () {
      try {
        yield this.obsiusClient.updatePost(file);
        new import_obsidian2.Notice(getText("actions.update.success"));
      } catch (e) {
        console.error(e);
        new import_obsidian2.Notice(getText("actions.update.failure"));
      }
    });
  }
  copyUrl(file) {
    return __async(this, null, function* () {
      const url = this.obsiusClient.getUrl(file);
      if (url) {
        yield navigator.clipboard.writeText(url);
        new import_obsidian2.Notice(getText("actions.copyUrl.success"));
      } else {
        new import_obsidian2.Notice(getText("actions.copyUrl.failure"));
      }
    });
  }
  deleteFile(file) {
    return __async(this, null, function* () {
      try {
        yield this.obsiusClient.deletePost(file);
        new import_obsidian2.Notice(getText("actions.remove.success"));
      } catch (e) {
        console.error(e);
        new import_obsidian2.Notice(getText("actions.remove.failure"));
      }
    });
  }
};
